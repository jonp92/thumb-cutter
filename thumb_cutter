#! /usr/bin/python
import os
import base64
import re
import time
import configparser
import subprocess
import logging
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


class FileHandler(FileSystemEventHandler):
    # watchdog monitors for new .gcode files being created, if it is a directory creation it is ignored.
    def on_created(self, event):
        if event.is_directory:
            return

        # if a .gcode file is created, read in the file to data variable

        if event.src_path.endswith('.gcode'):
            with open(event.src_path, 'r') as f:
                data = f.read()
            logging.info('New .gcode file created, searching for png base64.')
            # regex pattern to find data between thumbnail begin 500x500 plus any number 5 digits or longer
            # and thumbnail end. Then sub out all ; for "" and pipe data into base64 to be decoded
            # and stored in thumbnail_data.

            pattern = r'; thumbnail begin \d{3,}x{3,} \d{3,}(.+); thumbnail end'
            match = re.search(pattern, data, re.DOTALL)

            if match:
                logging.info('Thumbnail data found and copied, now to strip and decode using base64')
                thumbnail_data = match.group(1).strip()
                thumbnail_data = re.sub(r'^; ', '', thumbnail_data, flags=re.MULTILINE)
                thumbnail_data = base64.b64decode(thumbnail_data)

                # Find the filename from the gcode between ;filename:example.gcode/ Save this and document.
                pattern = r';filename:(.+?)/'
                match = re.search(pattern, data)
                if match:
                    filename = match.group(1).strip()
                    output_path = os.path.join(output_dir, filename + '.png')
                else:
                    # If filename is not found, use input filename with .png extension
                    filename = os.path.basename(event.src_path).replace('.gcode', '.png').replace(' ', '-')
                    output_path = os.path.join(output_dir, filename)

                with open(output_path, 'wb') as f:
                    f.write(thumbnail_data)
                logging.info(f'Saved thumbnail as {output_path}')

                # Copy the file to the remote server using scp if upload is enable in the config file
                if config.getboolean('remote', 'upload_enabled', fallback=True):
                    logging.info('SCP Upload Enabled, proceeding to upload.')
                    scp_command = ['scp', '-P', port, output_path, f'{username}@{server}:{remote_dir}']
                    subprocess.run(scp_command)
                    logging.info(f'Uploaded thumbnail to {server}:{remote_dir} with filename {filename}')
            else:
                logging.info(f'no base64 .png data encoded in {event.src_path}')

# this method preprocesses any existing file in the input_dir, saves them, and finally uploads them to a directory.


def create_thumbnails():
    for filename in os.listdir(input_dir):
        if filename.endswith('.gcode'):
            input_path = os.path.join(input_dir, filename)
            with open(input_path, 'r') as f:
                data = f.read()
            logging.info('.gcode file found, searching for png base64.')
            pattern = r'; thumbnail begin \d{3,}x\d{3,} \d{3,}(.+); thumbnail end'
            match = re.search(pattern, data, re.DOTALL)
            if match:
                logging.info('Thumbnail data found and copied, now to strip and decode using base64')
                thumbnail_data = match.group(1).strip()
                thumbnail_data = re.sub(r'^; ', '', thumbnail_data, flags=re.MULTILINE)
                thumbnail_data = base64.b64decode(thumbnail_data)

                # Find the filename from the gcode between ;filename:example.gcode/ Save this and document.
                pattern = r';filename:(.+?)/'
                match = re.search(pattern, data)
                if match:
                    filename = match.group(1).strip()
                    output_path = os.path.join(output_dir, filename + '.png')
                else:
                    # If filename is not found, use input filename with .png extension
                    filename = os.path.basename(filename).replace('.gcode', '.png').replace(' ', '-')
                    output_path = os.path.join(output_dir, filename)

                if not os.path.exists(output_path):
                    with open(output_path, 'wb') as f:
                        f.write(thumbnail_data)
                    logging.info('Saved thumbnail as {output_path}')

                # Copy the file to the remote server using scp if upload is enable in the config file
                    if config.getboolean('remote', 'upload_enabled', fallback=True):
                        logging.info('SCP Upload Enabled, proceeding to upload.')
                        scp_command = ['scp', '-P', port, output_path, f'{username}@{server}:{remote_dir}']
                        subprocess.run(scp_command)
                else:
                    logging.info(f'Thumbnail already exists for {filename}.png')
            else:
                logging.info(f'no base64 .png data encoded in {filename}')
    logging.info('Thumbnail preprocessing completed')


if __name__ == '__main__':

    # Read the configuration file
    config = configparser.ConfigParser()
    config.read('config.conf')

    # Setup logging
    log_dir = config.get('directories', 'log_dir', fallback='~')
    logging.basicConfig(filename=f'{log_dir}/thumb_cutter.log', encoding='utf-8', level=logging.INFO,
                        format='%(levelname)s %(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p -')

    # Get the directory paths from the configuration file
    input_dir = config.get('directories', 'input_dir')
    output_dir = config.get('directories', 'output_dir', fallback='~/.thumb_cutter/thumbs')

    # Get scp username, server, remote_dir, and port
    username = config.get('remote', 'username')
    server = config.get('remote', 'server')
    remote_dir = config.get('remote', 'remote_dir')
    port = config.get('remote', 'port', fallback='22')

    # Create the output directory if it does not exist
    os.makedirs(output_dir, exist_ok=True)

    # Create thumbnails for all existing files in the input directory
    logging.info('Thumbnail preprocessor starting')
    create_thumbnails()

    # Create the FileHandler and Observer objects
    event_handler = FileHandler()
    observer = Observer()

    # Schedule the observer to monitor the input directory
    observer.schedule(event_handler, input_dir, recursive=True)

    # Start the observer
    logging.info('File Observer has started')
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
